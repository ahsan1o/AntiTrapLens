"""
HTML reporter for AntiTrapLens.
"""

import json
from pathlib import Path
from typing import Dict, Any
from ...core.types import ScanResult
from ..base import BaseReporter
from ..common import DataConverter
from .styles import CSS_STYLES

class HTMLReporter(BaseReporter):
    """HTML-based report generator."""

    def __init__(self, config=None):
        super().__init__(config)

    def generate(self, scan_result: ScanResult, output_path: str = None) -> str:
        """Generate HTML report."""
        if output_path is None:
            output_path = "antitraplens_report.html"

        html_content = self._generate_html(scan_result)

        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)

        return f"HTML report saved to {output_path}"

    def _generate_html(self, scan_result: ScanResult) -> str:
        """Generate HTML content."""
        scan_info = scan_result.scan_info
        pages = scan_result.pages

        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AntiTrapLens Report - Privacy & Dark Pattern Analysis</title>
    <style>
        {CSS_STYLES}
    </style>
    <script>
        function switchTab(button, tabId) {{
            // Get the parent tabs container
            const tabsContainer = button.closest('.tabs');
            
            // Remove active class from all tab buttons in this container
            tabsContainer.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            
            // Add active class to clicked button
            button.classList.add('active');
            
            // Hide all tab contents in this container
            tabsContainer.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // Show the selected tab content
            const selectedTab = tabsContainer.querySelector('#' + tabId);
            if (selectedTab) {{
                selectedTab.classList.add('active');
            }}
        }}
    </script>
</head>
<body>
    {self._generate_project_header()}
    <div class="content-wrapper">
        {self._generate_hero_section(scan_info)}
        {self._generate_pages_section(pages)}
        {self._generate_summary_section(pages)}
        {self._generate_footer()}
    </div>
</body>
</html>"""
        return html

    def _generate_project_header(self) -> str:
        """Generate project header with author and GitHub info."""
        return """<div class="project-header">
    <div class="project-info">
        <h1>AntiTrapLens</h1>
        <p>Privacy & Dark Pattern Detection Tool</p>
        <div class="author-info">
            <span>Created by: Ahsan Malik</span>
            <a href="https://github.com/ahsan1o/AntiTrapLens" target="_blank" class="github-link">
                GitHub Repository
            </a>
        </div>
    </div>
</div>"""

    def _generate_footer(self) -> str:
        """Generate footer with project information."""
        return """<footer class="project-footer">
    <div class="footer-content">
        <p>Generated by <strong>AntiTrapLens</strong> - Privacy & Dark Pattern Detection Tool</p>
        <p>Author: Ahsan Malik | 
           <a href="https://github.com/ahsan1o/AntiTrapLens" target="_blank">View on GitHub</a>
        </p>
        <p>Report generated on: <span id="current-date"></span></p>
    </div>
    <script>
        document.getElementById('current-date').textContent = new Date().toLocaleString();
    </script>
</footer>"""

    def _generate_hero_section(self, scan_info: Dict[str, Any]) -> str:
        """Generate hero section HTML."""
        return f"""<div class="hero-section">
    <div class="hero-overlay">
        <div class="hero-title">Privacy & Dark Pattern Analysis Report</div>
        <div class="hero-stats">
            <div class="stat-item">
                <span class="stat-number">{scan_info.get('pages_scanned', 0)}</span>
                <span class="stat-label">Pages Scanned</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">{scan_info.get('total_findings', 0)}</span>
                <span class="stat-label">Total Findings</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">{scan_info.get('start_url', 'N/A')}</span>
                <span class="stat-label">Target URL</span>
            </div>
        </div>
    </div>
</div>"""

    def _generate_pages_section(self, pages) -> str:
        """Generate pages section HTML."""
        html = '<section class="pages-section">'

        for i, page in enumerate(pages):
            category = getattr(page, 'category', 'General') or 'General'
            card_class = f"page-card card-variation-{i % 3 + 1}"
            html += f"""
            <div class="{card_class}">
                <div class="card-header">
                    <h3>Page Analysis {i+1}</h3>
                    <div class="page-meta">
                        <span class="category-badge category-{category.lower()}">{category}</span>
                        <span class="page-title">{getattr(page, 'title', 'Untitled Page')}</span>
                    </div>
                </div>
                <div class="card-content">
                    <div class="url-display">
                        <a href="{page.url}" target="_blank" class="url-link">{page.url}</a>
                    </div>
                    {self._generate_tracking_access_warning(page)}
                    
                    <!-- Dark Patterns Section -->
                    <div class="analysis-section dark-patterns-section">
                        <h3 class="section-title">üé≠ Dark Patterns Analysis</h3>
                        <div class="section-description">
                            <p>Dark patterns are user interface designs that manipulate or deceive users into making decisions they might not otherwise make.</p>
                        </div>
                        {self._generate_page_findings(page)}
                        {self._generate_page_score(page)}
                    </div>
                    
                    <!-- Cookies & Tracking Section -->
                    <div class="analysis-section cookies-section">
                        <h3 class="section-title">üç™ Cookies & Tracking Analysis</h3>
                        <div class="section-description">
                            <p>This section analyzes cookies and tracking mechanisms that monitor your browsing behavior and collect personal data.</p>
                        </div>
                        <div class="tracking-notice">
                            <p class="warning-text">
                                <strong>‚ö†Ô∏è Important:</strong> These are the websites that will start tracking you 
                                if you give them cookie consent on this page.
                            </p>
                        </div>
                        {self._generate_page_cookies(page)}
                    </div>
                </div>
            </div>"""

        html += '</section>'
        return html

    def _generate_tracking_access_warning(self, page) -> str:
        """Generate tracking access warning HTML."""
        if not hasattr(page, 'tracking_access') or page.tracking_access['access_summary']['total_tracking_domains'] == 0:
            return ''
        
        tracking = page.tracking_access
        html = '<div class="tracking-warning">'
        html += '<h3>üö® Tracking Access Warning</h3>'
        html += f'<p class="warning-text">By accepting cookies on this website, you grant tracking access to <strong>{tracking["access_summary"]["total_tracking_domains"]} companies</strong></p>'
        
        # Show summary statistics
        summary = tracking['access_summary']
        html += '<div class="tracking-summary">'
        html += '<div class="summary-stats">'
        if summary.get('known_trackers', 0) > 0:
            html += f'<span class="stat known-trackers">üîç {summary["known_trackers"]} Known Trackers</span>'
        if summary.get('potential_trackers', 0) > 0:
            html += f'<span class="stat potential-trackers">‚ö†Ô∏è {summary["potential_trackers"]} Potential Trackers</span>'
        if summary.get('high_risk_domains', 0) > 0:
            html += f'<span class="stat high-risk">üö® {summary["high_risk_domains"]} High Risk</span>'
        html += '</div></div>'
        
        # Show detailed tracking domains
        if 'potential_trackers' in tracking and tracking['potential_trackers']:
            html += '<div class="tracking-domains">'
            html += '<h4>Companies That Will Track You:</h4>'
            
            # Sort by risk level and tracking likelihood
            sorted_trackers = sorted(
                tracking['potential_trackers'], 
                key=lambda x: (self._get_risk_priority(x['risk_level']), -x['tracking_likelihood']),
                reverse=True
            )
            
            html += '<div class="domain-list">'
            
            for tracker in sorted_trackers[:20]:  # Show top 20 most concerning
                domain = tracker['domain']
                risk_class = f"risk-{tracker['risk_level']}"
                tracker_type = tracker['tracker_type']
                likelihood_pct = int(tracker['tracking_likelihood'] * 100)
                
                title_text = f"{tracker_type} - {tracker['risk_level'].title()} Risk ({likelihood_pct}% tracking likelihood)"
                if tracker['is_known_tracker']:
                    title_text += " - Known Tracker"
                
                html += f'<span class="tracking-domain {risk_class}" title="{title_text}">'
                html += f'{domain}'
                if tracker['risk_level'] == 'high':
                    html += ' üö®'
                elif tracker['risk_level'] == 'medium':
                    html += ' ‚ö†Ô∏è'
                html += '</span>'
            
            if len(sorted_trackers) > 20:
                remaining = len(sorted_trackers) - 20
                html += f'<span class="tracking-domain more">... and {remaining} more companies</span>'
            
            html += '</div></div>'
        
        # Show data sharing warning
        if summary.get('data_shared_with'):
            html += '<div class="data-sharing-notice">'
            html += '<p><strong>Your data will be shared with:</strong></p>'
            html += '<ul class="data-sharing-list">'
            
            shared_domains = summary['data_shared_with'][:10]  # Limit for readability
            for domain in shared_domains:
                html += f'<li>{domain}</li>'
            
            if len(summary['data_shared_with']) > 10:
                remaining = len(summary['data_shared_with']) - 10
                html += f'<li>... and {remaining} more companies</li>'
            
            html += '</ul></div>'
        
        html += '</div>'
        return html
    
    def _get_risk_priority(self, risk_level: str) -> int:
        """Get priority number for risk level sorting."""
        priorities = {'high': 3, 'medium': 2, 'low': 1, 'minimal': 0}
        return priorities.get(risk_level.lower(), 0)

    def _generate_page_cookies(self, page) -> str:
        """Generate cookie information HTML with enhanced descriptions."""
        if not hasattr(page, 'cookies') or not page.cookies:
            cookie_html = '<div class="cookies"><h4>Cookies</h4><p class="no-data">No cookies found</p></div>'
        else:
            cookie_html = '<div class="cookies"><h4>Cookies</h4>'
            cookie_html += f'<p><strong>Total:</strong> {len(page.cookies)}</p>'

            third_party = [c for c in page.cookies if c.is_third_party]
            if third_party:
                cookie_html += f'<p><strong>Third-party:</strong> {len(third_party)}</p>'

            if hasattr(page, 'cookie_access_analysis'):
                analysis = page.cookie_access_analysis
                if analysis.get('data_collection'):
                    cookie_html += f'<p><strong>Data Collection:</strong> {", ".join(analysis["data_collection"][:3])}</p>'
                if analysis.get('privacy_concerns'):
                    cookie_html += f'<p><strong>Privacy Issues:</strong> {len(analysis["privacy_concerns"])}</p>'

            cookie_html += '</div>'

        # Add cookie findings with descriptions
        cookie_findings_html = ''
        if hasattr(page, 'dark_patterns'):
            cookie_findings = [f for f in page.dark_patterns.findings 
                             if DataConverter.is_cookie_tracking_pattern(f.pattern)]
            if cookie_findings:
                cookie_findings_html += f'<div class="cookie-findings"><h4>Cookie & Tracking Findings ({len(cookie_findings)})</h4><ul>'
                for finding in cookie_findings:
                    pattern_info = DataConverter.get_pattern_description(finding.pattern)
                    cookie_findings_html += f'<li class="finding severity-{finding.severity.lower()}">'
                    cookie_findings_html += f'<div class="finding-header">'
                    cookie_findings_html += f'<strong>{finding.pattern.replace("_", " ").title()}</strong> '
                    cookie_findings_html += f'<span class="severity-badge severity-{finding.severity.lower()}">{finding.severity.upper()}</span>'
                    cookie_findings_html += f'</div>'
                    cookie_findings_html += f'<div class="finding-description">{finding.description}</div>'
                    cookie_findings_html += f'<div class="pattern-explanation">'
                    cookie_findings_html += f'<strong>What this means:</strong> {pattern_info["description"]}'
                    cookie_findings_html += f'</div>'
                    cookie_findings_html += f'<div class="user-impact">'
                    cookie_findings_html += f'<strong>How it affects you:</strong> {pattern_info["user_impact"]}'
                    cookie_findings_html += f'</div>'
                    cookie_findings_html += '</li>'
                cookie_findings_html += '</ul></div>'

        return cookie_html + cookie_findings_html

    def _generate_page_findings(self, page) -> str:
        """Generate findings HTML with descriptions and user impact."""
        if not hasattr(page, 'dark_patterns') or not page.dark_patterns.findings:
            return '<div class="findings"><h4>Dark Patterns</h4><p class="no-data">No findings</p></div>'

        # Filter out cookie-related findings
        dark_findings = [f for f in page.dark_patterns.findings 
                        if DataConverter.is_dark_pattern(f.pattern)]
        
        if not dark_findings:
            return '<div class="findings"><h4>Dark Patterns</h4><p class="no-data">No dark pattern findings</p></div>'

        html = f'<div class="findings"><h4>Dark Patterns ({len(dark_findings)})</h4><ul>'

        for finding in dark_findings:
            pattern_info = DataConverter.get_pattern_description(finding.pattern)
            html += f'<li class="finding severity-{finding.severity.lower()}">'
            html += f'<div class="finding-header">'
            html += f'<strong>{finding.pattern.replace("_", " ").title()}</strong> '
            html += f'<span class="severity-badge severity-{finding.severity.lower()}">{finding.severity.upper()}</span>'
            html += f'</div>'
            html += f'<div class="finding-description">{finding.description}</div>'
            html += f'<div class="pattern-explanation">'
            html += f'<strong>What this means:</strong> {pattern_info["description"]}'
            html += f'</div>'
            html += f'<div class="user-impact">'
            html += f'<strong>How it affects you:</strong> {pattern_info["user_impact"]}'
            html += f'</div>'
            html += '</li>'

        html += '</ul></div>'
        return html

    def _generate_page_score(self, page) -> str:
        """Generate score HTML."""
        if not hasattr(page, 'dark_patterns') or not page.dark_patterns.score:
            return ''

        score = page.dark_patterns.score
        grade = score.get('grade', 'N/A')
        total_score = score.get('total_score', 0)

        return f'<div class="score"><h4>Score</h4><span class="grade grade-{grade.lower()}">{total_score}/100 ({grade})</span></div>'

    def _generate_summary_section(self, pages) -> str:
        """Generate summary section HTML with enhanced information."""
        dark_pattern_counts = DataConverter.get_dark_pattern_summary(pages)
        cookie_counts = DataConverter.get_cookie_summary(pages)

        if not dark_pattern_counts and not cookie_counts:
            return '<section class="summary-section"><div class="no-findings">No dark patterns or cookie issues detected - clean scan!</div></section>'

        html = '<section class="summary-section"><h2>Detection Summary</h2>'
        
        if dark_pattern_counts:
            html += '<div class="summary-subsection">'
            html += '<h3>üé≠ Dark Patterns Detected</h3>'
            html += '<p class="section-intro">Dark patterns are manipulative design elements that trick users into unintended actions.</p>'
            html += '<div class="summary-grid">'
            for pattern, data in sorted(dark_pattern_counts.items(), key=lambda x: x[1]['count'], reverse=True):
                severity_class = f"severity-{data['severity'].lower()}"
                pattern_info = DataConverter.get_pattern_description(pattern)
                html += f'''
                <div class="summary-card {severity_class}" title="{pattern_info['user_impact']}">
                    <div class="pattern-name">{pattern.replace('_', ' ').title()}</div>
                    <div class="pattern-count">{data["count"]}</div>
                    <div class="pattern-severity">{data["severity"].upper()}</div>
                    <div class="pattern-description">{pattern_info['description']}</div>
                </div>'''
            html += '</div></div>'
        
        if cookie_counts:
            html += '<div class="summary-subsection">'
            html += '<h3>üç™ Cookie & Tracking Issues</h3>'
            html += '<p class="section-intro">These issues relate to how the website tracks your behavior and collects your data.</p>'
            html += '<div class="summary-grid">'
            for pattern, data in sorted(cookie_counts.items(), key=lambda x: x[1]['count'], reverse=True):
                severity_class = f"severity-{data['severity'].lower()}"
                pattern_info = DataConverter.get_pattern_description(pattern)
                html += f'''
                <div class="summary-card {severity_class}" title="{pattern_info['user_impact']}">
                    <div class="pattern-name">{pattern.replace('_', ' ').title()}</div>
                    <div class="pattern-count">{data["count"]}</div>
                    <div class="pattern-severity">{data["severity"].upper()}</div>
                    <div class="pattern-description">{pattern_info['description']}</div>
                </div>'''
            html += '</div></div>'
        
        html += '</section>'
        return html

    def get_format(self) -> str:
        """Get report format."""
        return "html"
